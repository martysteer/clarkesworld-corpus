{"fingerprint": "oYn7rI8kT7KpUvnvsd7HFWynhIs=", "sitename": "Clarkesworld Magazine", "title": "Another Word: It's Good to Be Lazy and Foolish by Ken Liu", "author": "Ken Liu", "date": "2022-01-01", "source": "https://clarkesworldmagazine.com/another_word_05_15/", "hostname": "clarkesworldmagazine.com", "excerpt": "Clarkesworld Science Fiction and Fantasy Magazine and Podcast. This page: Another Word: It's Good to Be Lazy and Foolish by Ken Liu", "categories": null, "tags": null, "id": 0, "license": null, "comments": null, "source-hostname": "Clarkesworld Magazine", "text": "Non-Fiction\n Another Word: It's Good to Be Lazy and Foolish\n I\u2019ve been employed in three professions that all involve working with a lot of text: programming, law, and creative writing. I\u2019d like to show you what I\u2019ve learned from the first two that I think can be helpful to writers.\n Among software developers, there\u2019s a generally accepted belief that the most productive programmers are lazy and dumb.\n What?\n Okay, allow me to explain. Laziness is a virtue among programmers because lazy programmers are interested in doing their jobs in a way that maximizes using the creative parts of their brains and minimizes tasks that are better left to the machine.\n Here\u2019s an example.\n Programmers are often faced with the need to modify text across many lines across multiple files in some systematic manner. This could be because of a change in the interface definition of a module (e.g. all instances of GreatLibrary_procedure() now have to be changed to AwesomeLibrary_function()), because of a change in coding style or naming convention (so all instances of AwsomeLibrary_function() have to be changed to awesome_library_function()), or because of some quirk of the syntax of the language (e.g., in Python, indentation of lines is important for control flow, so frequently blocks of code have to be indented or unindented as a unit).\n Text editors used by programmers are optimized to make many of these systematic changes easier, though one often has to learn arcane commands for how to invoke these capabilities (just look up vi and emacs). A programmer who is not lazy, who is focused on getting the job done and meeting the daily lines-of-code metric, will learn the minimum amount necessary, open up the files, and get to work. If that means pushing the tab key at the beginning of each line twenty times, or opening every file in a directory of three hundred and running the same search-and-replace sequence one by one, so be it. Two hours later, the changes are still not complete, and the programmer is suffering from carpal tunnel syndrome\u2014and by the way, they missed a couple of files in this tedious process. But to the inexperienced manager, it seems the programmer is working hard.\n The lazy programmer, on the other hand, will seem to hardly be working in the interim. They spend the time to learn the text editor. They study its commands and syntax and scripting language and support for regular expressions until they can wield it like a robotic servant. This process might take hours. But when they\u2019re done, they\u2019ll write a few lines of magical incantation, and voil\u00e0, all three hundred files will be changed perfectly and instantaneously.\n The sort of laziness I\u2019m praising, in other words, is an aversion for drudgery. It might be quicker in the short term to push the tab key twenty times in a row, but it\u2019s more fun to learn how to use the macro system to accomplish the same thing in three or four keystrokes. Instead of copying-and-pasting a block of code, they\u2019d rather refactor that into a separate function. Instead of extending and elaborating on a bad foundation, they prefer to rewrite the system from scratch so it\u2019s more solid. Instead of doing things the way it has always been done, they prefer to find a more elegant and beautiful shortcut. Thus, they invest the time into intellectually stimulating tasks that may (or may not) pay off later, even if that means they won\u2019t write the lines of code demanded of them that day.\n So what about \u201cdumb?\u201d Rather than keep on using that word, which is probably outdated, I prefer to think of the quality I\u2019m praising as \u201cfoolishness,\u201d in the sense of \u201cstay hungry, stay foolish.\u201d This is related to the aversion of drudgery. Foolish programmers know that they\u2019re not the best at their job and believe that there is probably a better way.\n The foolishness that I\u2019m praising is related to this aversion of drudgery. These types of programmers know that they\u2019re not the best at their job and believe that there is probably a better way. They\u2019re curious about new text editors, new programming languages, new design patterns, etc., because they think someone smarter has invented a way to do the job better, a way that they can adopt so that they can be even lazier.\n When I became a lawyer, however, I found out that the way the profession approached text was very different (caveat, I\u2019m obviously talking from my very limited experience in corporate law, and I must note that I generally had very positive experiences with my mentors). Lawyers seem intent on treating contracts as a patchwork of magical phrases that must be preserved exactly as they are, and laziness is actively discouraged. For example, if some complicated clause drafted with the typical pleonastic legalese (\u201csell, convey, license, lease, rent, assign, or otherwise transfer\u201d) is needed multiple times in a contract\u2014perhaps with minor variations\u2014then the safe thing to do is to copy and paste that language everywhere and adapt as necessary, instead of refactoring into something more elegant. And if that means a great deal of drudgery for the associates and legal secretaries, that\u2019s even better, because lawyers are paid by the billable hour.\n To some degree, this is understandable, as lawyers live in perpetual fear that changing a single word in some well-worn bit of legalese will cause a judge to suddenly decide to give the clause a new interpretation. Besides, every lawyer lives in mortal fear of admitting that they don\u2019t know something, and so being foolish is not even an option\u2014the words from the form document must remain exactly as they are because they contain magic. Thus, refactoring is out, as is any attempt to make things more elegant and concise. When in doubt, just add more words and clauses to dangle from a rickety, unstable framework until contracts turn into messy, ridiculous structures full of hoarded junk that hasn\u2019t been touched since the 18th century. But hey, that means even more copying-and-pasting and proofreading and reference checking and modifying for subject-verb agreement . . . and more billable hours!\n I think writers should think more like programmers and less like lawyers. Instead of striving hard to meet some daily word count goal, I advocate giving yourself permission to be lazy. It\u2019s fine to spend the time to work out worldbuilding details that will never go into the finished story because it\u2019s intellectually stimulating and fun. It\u2019s fine to think about how to accomplish characterization and worldbuiding, and advancing the plot all in the same scene, even if that means you end up writing fewer words that day. It\u2019s fine to throw away a draft and start a new story from scratch if continuing to work on the flawed draft feels like drudgery and deprives you of joy. It\u2019s more than fine to refuse to do the same thing you\u2019ve done many times (and may have found success with) because it now feels tedious\u2014better to be lazy and think of something new to try.\n And it\u2019s perfectly valid for writers to admit that they are foolish, that they don\u2019t know what they\u2019re doing. Such an attitude leaves one open to influences from everywhere, not just the right critiques or the best books. If you see a story resonating with readers but doing things in an unusual way, try to understand why it works. If you see writers succeed by following a different career path than you\u2019ve envisioned for yourself, try to see if they have lessons to teach you. If you hear advice that is counterintuitive or sounds dumb, try to resist the urge to dismiss it out of hand and see if there is, in fact, something in it that you can learn.\n Above all, don\u2019t be like the lawyers who treat template contracts as sacred spells that must be preserved at all costs. Writing is a kind of magic, but it\u2019s the living magic of making a connection between the reader\u2019s mind and yours, not the dead magic of judges\u2019 interpretations. Take risks; leave out things that \u201ceveryone\u201d claims you must have; add in things that \u201cno one\u201d thinks will work; experiment; mix it up; rewrite the rules if you don\u2019t like them; tell, if you don\u2019t believe it should be shown; dare to boldly stick in that adverb, write the story that only you can write.\n Ken Liu is an American author of speculative fiction. A winner of the Nebula, Hugo, and World Fantasy awards, he wrote the Dandelion Dynasty, a silkpunk epic fantasy series (starting with The Grace of Kings), as well as short story collections The Paper Menagerie and Other Stories and The Hidden Girl and Other Stories. He also authored the Star Wars novel The Legends of Luke Skywalker.\n Prior to becoming a full-time writer, Liu worked as a software engineer, corporate lawyer, and litigation consultant. Liu frequently speaks at conferences and universities on a variety of topics, including futurism, cryptocurrency, history of technology, bookmaking, narrative futures, and the mathematics of origami.\n Liu is also the translator for Liu Cixin\u2019s The Three-Body Problem, Hao Jingfang\u2019s \u201cFolding Beijing\u201d and Vagabonds, Chen Qiufan\u2019s Waste Tide, as well as the editor of Invisible Planets and Broken Stars, anthologies of contemporary Chinese science fiction.\n He lives with his family near Boston, Massachusetts."}